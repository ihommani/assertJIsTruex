package ihommani;

import org.assertj.core.api.AbstractAssert;
// Assertions is needed if an assertion for Iterable is generated
import org.assertj.core.api.Assertions;


/**
 * {@link Sexe} specific assertions - Generated by CustomAssertionGenerator.
 */
public class SexeAssert extends AbstractAssert<SexeAssert, Sexe> {

  /**
   * Creates a new </code>{@link SexeAssert}</code> to make assertions on actual Sexe.
   * @param actual the Sexe we want to make assertions on.
   */
  public SexeAssert(Sexe actual) {
    super(actual, SexeAssert.class);
  }

  /**
   * An entry point for SexeAssert to follow AssertJ standard <code>assertThat()</code> statements.<br>
   * With a static import, one's can write directly : <code>assertThat(mySexe)</code> and get specific assertion with code completion.
   * @param actual the Sexe we want to make assertions on.
   * @return a new </code>{@link SexeAssert}</code>
   */
  public static SexeAssert assertThat(Sexe actual) {
    return new SexeAssert(actual);
  }

  /**
   * Verifies that the actual Sexe's declaringClass is equal to the given one.
   * @param declaringClass the given declaringClass to compare the actual Sexe's declaringClass to.
   * @return this assertion object.
   * @throws AssertionError - if the actual Sexe's declaringClass is not equal to the given one.
   */
  public SexeAssert hasDeclaringClass(Class declaringClass) {
    // check that actual Sexe we want to make assertions on is not null.
    isNotNull();

    // overrides the default error message with a more explicit one
    String errorMessage = "\nExpected declaringClass of:\n  <%s>\nto be:\n  <%s>\nbut was:\n  <%s>";
    
    // null safe check
    Class actualDeclaringClass = actual.getDeclaringClass();
    if (!org.assertj.core.util.Objects.areEqual(actualDeclaringClass, declaringClass)) {
      failWithMessage(errorMessage, actual, declaringClass, actualDeclaringClass);
    }

    // return the current assertion for method chaining
    return this;
  }

}
